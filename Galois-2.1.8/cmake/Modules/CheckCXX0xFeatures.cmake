CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

MACRO(CXX0X_CHECK_FEATURE FEATURE_NAME FEATURE_NUMBER RESULT_VAR)
  IF (NOT DEFINED ${RESULT_VAR})
    set(_bindir "${CMAKE_CURRENT_BINARY_DIR}/CXX0xCheck/${FEATURE_NAME}")

    # force find_file to be run always instead of caching last result
    set(_SRCFILE_ALL "_SRCFILE_ALL-NOTFOUND")
    IF(${FEATURE_NUMBER})
      #SET(_SRCFILE_BASE ${CMAKE_CURRENT_LIST_DIR}/c++0x-test-${FEATURE_NAME}-N${FEATURE_NUMBER})
      find_file(_SRCFILE_ALL "c++0x-test-${FEATURE_NAME}-N${FEATURE_NUMBER}.cpp" PATHS ${CMAKE_MODULE_PATH})
      get_filename_component(_SRCFILE_PATH ${_SRCFILE_ALL} PATH)
      get_filename_component(_SRCFILE_NAME ${_SRCFILE_ALL} NAME_WE)
      set(_SRCFILE_BASE "${_SRCFILE_PATH}/${_SRCFILE_NAME}")
      SET(_LOG_NAME "\"${FEATURE_NAME}\" (N${FEATURE_NUMBER})")
    ELSE()
      #SET(_SRCFILE_BASE ${CMAKE_CURRENT_LIST_DIR}/c++0x-test-${FEATURE_NAME})
      find_file(_SRCFILE_ALL "c++0x-test-${FEATURE_NAME}.cpp" PATHS ${CMAKE_MODULE_PATH})
      get_filename_component(_SRCFILE_PATH ${_SRCFILE_ALL} PATH)
      get_filename_component(_SRCFILE_NAME ${_SRCFILE_ALL} NAME_WE)
      set(_SRCFILE_BASE "${_SRCFILE_PATH}/${_SRCFILE_NAME}")
      SET(_LOG_NAME "\"${FEATURE_NAME}\"")
    ENDIF()
    MESSAGE(STATUS "Checking C++0x support for ${_LOG_NAME}")
  
    SET(_SRCFILE "${_SRCFILE_BASE}.cpp")
    SET(_SRCFILE_FAIL "${_SRCFILE_BASE}_fail.cpp")
    SET(_SRCFILE_FAIL_COMPILE "${_SRCFILE_BASE}_fail_compile.cpp")

    IF (CROSS_COMPILING)
      try_compile(${RESULT_VAR} "${_bindir}" "${_SRCFILE}")
      IF (${RESULT_VAR} AND EXISTS ${_SRCFILE_FAIL})
        try_compile(${RESULT_VAR} "${_bindir}_fail" "${_SRCFILE_FAIL}")
      ENDIF (${RESULT_VAR} AND EXISTS ${_SRCFILE_FAIL})
    ELSE()
      try_run(_RUN_RESULT_VAR _COMPILE_RESULT_VAR "${_bindir}" "${_SRCFILE}")
      IF (_COMPILE_RESULT_VAR AND NOT _RUN_RESULT_VAR)
        SET(${RESULT_VAR} TRUE)
      ELSE()
        SET(${RESULT_VAR} FALSE)
      ENDIF()
      IF (${RESULT_VAR} AND EXISTS ${_SRCFILE_FAIL})
        try_run(_RUN_RESULT_VAR _COMPILE_RESULT_VAR
            "${_bindir}_fail" "${_SRCFILE_FAIL}")
        IF(_COMPILE_RESULT_VAR AND _RUN_RESULT_VAR)
          SET(${RESULT_VAR} TRUE)
        ELSE()
          SET(${RESULT_VAR} FALSE)
        ENDIF()
      ENDIF()
    ENDIF()

    IF (${RESULT_VAR} AND EXISTS ${_SRCFILE_FAIL_COMPILE})
      try_compile(_TMP_RESULT "${_bindir}_fail_compile" "${_SRCFILE_FAIL_COMPILE}")
      IF (_TMP_RESULT)
        SET(RESULT_VAR FALSE)
      ELSE (_TMP_RESULT)
        SET(RESULT_VAR TRUE)
      ENDIF (_TMP_RESULT)
    ENDIF (${RESULT_VAR} AND EXISTS ${_SRCFILE_FAIL_COMPILE})

    IF (${RESULT_VAR})
      MESSAGE(STATUS "Checking C++0x support for ${_LOG_NAME}: works")
    ELSE()
      MESSAGE(STATUS "Checking C++0x support for ${_LOG_NAME}: not supported")
    ENDIF()
    SET(${RESULT_VAR} ${${RESULT_VAR}} CACHE INTERNAL "C++0x support for ${_LOG_NAME}")
  ENDIF (NOT DEFINED ${RESULT_VAR})
ENDMACRO(CXX0X_CHECK_FEATURE)

CXX0X_CHECK_FEATURE("static_assert" 1720 HAS_CXX0X_STATIC_ASSERT)
CXX0X_CHECK_FEATURE("long_long" 1811 HAS_CXX0X_LONG_LONG)
CXX0X_CHECK_FEATURE("rvalue-references" 2118 HAS_CXX0X_RVALUE_REFERENCES)
CXX0X_CHECK_FEATURE("constexpr" 2235 HAS_CXX0X_CONSTEXPR)
CXX0X_CHECK_FEATURE("sizeof_member" 2253 HAS_CXX0X_SIZEOF_MEMBER)
CXX0X_CHECK_FEATURE("__func__" 2340 HAS_CXX0X_FUNC)
CXX0X_CHECK_FEATURE("nullptr" 2431 HAS_CXX0X_NULLPTR)
CXX0X_CHECK_FEATURE("cstdint" "" HAS_CXX0X_CSTDINT_H)
CXX0X_CHECK_FEATURE("lambda" "" HAS_CXX0X_LAMBDA)
